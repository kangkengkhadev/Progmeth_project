@startuml
class logic.entity.ghost.state.RespawnState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
abstract class logic.entity.item.BaseItem {
- Image sprite
+ int getZIndex()
+ void draw(GraphicsContext)
+ {abstract}void useEffect()
}
class logic.entity.ghost.state.FreezeState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
class logic.entity.item.Cloak {
+ void useEffect()
}
class render.SceneController {
- {static} SceneController instance
- Stage rootStage
- long startTime
- double accumulateFps
- {static} AudioPlayer gameOverAudio
+ {static} SceneController getInstance()
+ void showMainMenu()
+ void showGamePanel()
+ void showGameOver()
}
class logic.entity.ghost.state.ChaseState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
class logic.entity.ghost.SwiftGhost {
# double getSpeedMultiplier()
}
class logic.Vector2D {
- double x
- double y
+ double getLength()
+ Vector2D add(Vector2D)
+ Vector2D subtract(Vector2D)
+ Direction getCurrentDirection()
+ boolean isSameAxis(Vector2D)
+ double getX()
+ double getY()
+ void setX(double)
+ void setY(double)
+ boolean equals(Object)
}
class logic.entity.ghost.TankGhost {
+ void attack()
}
class logic.fsm.FiniteStateMachine {
- BaseState initialState
- BaseState currentState
- String currentStateName
+ void update(double)
+ void changeState(BaseState)
+ String getCurrentStateName()
}
class logic.entity.Pacman {
- {static} Image spriteNormal
- {static} Image spriteInvincible
- {static} Image spriteHeart
- {static} AudioPlayer frightenedGhostAudio
- {static} AudioPlayer collectedCoinAudio
- {static} AudioPlayer collectedFreezePotionAudio
- {static} AudioPlayer collectedCloakAudio
- Vector2D velocity
- Vector2D nextVelocity
- int health
- PacmanState state
+ int getZIndex()
+ void draw(GraphicsContext)
- void getInput()
- void changeVelocity()
+ void startInvincible(long)
- void collisionCheck()
+ void update(double)
- void move(double)
+ Vector2D getVelocity()
+ void takeDamage(int)
}
class util.InputUtility {
- {static} ArrayList<KeyCode> keyPressed
+ {static} boolean getKeyPressed(KeyCode)
+ {static} void setKeyPressed(KeyCode,boolean)
}
enum logic.Direction {
+  UP
+  DOWN
+  LEFT
+  RIGHT
}
enum logic.fsm.PacmanState {
+  NORMAL
+  INVINCIBLE
}
abstract class logic.entity.Entity {
# Vector2D position
# boolean destroyed
# double width
# double height
+ void destroy()
+ boolean isDestroyed()
+ Vector2D getPosition()
+ void setX(double)
+ void setY(double)
+ Vector2D getCentroid()
+ double getWidth()
+ void setWidth(double)
+ double getHeight()
+ void setHeight(double)
}
class logic.entity.ghost.state.ScatterState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
class logic.GameController {
- {static} GameController instance
- Map map
- ArrayList<Renderable> renderedEntities
- ArrayList<BaseGhost> ghosts
- ArrayList<BaseItem> items
- Comparator<Renderable> comparator
- Pacman pacman
- GamePanel gamePanel
- TileMap tileMap
- int score
- int numItems
- boolean spawnable
- boolean isGameOver
+ void start(GraphicsContext)
- void spawnItem()
- void spawnGhost()
+ void update(double)
+ void render(GraphicsContext)
- void addNewGhost(BaseGhost)
- void addNewItem(BaseItem)
- void addNewEntity(Renderable)
- void renderEntities(GraphicsContext)
+ Map getMap()
+ {static} GameController getInstance()
+ GamePanel getGamePanel()
+ Pacman getPacman()
+ ArrayList<BaseGhost> getGhosts()
+ ArrayList<BaseItem> getItems()
+ int getScore()
+ void setScore(int)
+ void gameOver()
+ boolean isGameOver()
}
class logic.entity.ghost.ScaffGhost {
+ void startFreeze()
}
class util.Config {
+ {static} int MAP_X_DIMENSION
+ {static} int MAP_Y_DIMENSION
+ {static} double PACMAN_SPEED
+ {static} double PACMAN_INVINCIBLE_SPEED_MULTIPLIER
+ {static} int PACMAN_X_ORIGIN
+ {static} int PACMAN_Y_ORIGIN
+ {static} int PACMAN_Z_INDEX
+ {static} double PACMAN_COLLISION_RADIUS
+ {static} int PACMAN_MAX_HEALTH
+ {static} int PACMAN_HURT_INVINCIBILITY_DURATION
+ {static} int FPS_CAP
+ {static} int TILE_MAP_Z_INDEX
+ {static} double MOVEMENT_OFFSET_THRESHOLD
+ {static} int GHOST_X_ORIGIN
+ {static} int GHOST_Y_ORIGIN
+ {static} double GHOST_FRIGHTENED_SPEED_MULTIPLIER
+ {static} double GHOST_RESPAWN_MOVEMENT_OFFSET_MULTIPLIER
+ {static} double GHOST_RESPAWN_SPEED_MULTIPLIER
+ {static} double GHOST_FREEZE_SPEED_MULTIPLIER
+ {static} int GHOST_FRIGHTENED_DURATION
+ {static} int GHOST_FREEZE_DURATION
+ {static} int INVINCIBILITY_DURATION
+ {static} double NORMAL_GHOST_SPEED
+ {static} int GHOST_Z_INDEX
+ {static} int YELLOW_GHOST_X_ORIGIN
+ {static} int YELLOW_GHOST_Y_ORIGIN
+ {static} int YELLOW_GHOST_CHASE_DURATION
+ {static} int YELLOW_GHOST_SCATTER_DURATION
+ {static} int ORANGE_GHOST_CHASE_DURATION
+ {static} int ORANGE_GHOST_SCATTER_DURATION
+ {static} int ORANGE_GHOST_X_ORIGIN
+ {static} int ORANGE_GHOST_Y_ORIGIN
+ {static} int GREEN_GHOST_CHASE_DURATION
+ {static} int GREEN_GHOST_SCATTER_DURATION
+ {static} int GREEN_GHOST_X_ORIGIN
+ {static} int GREEN_GHOST_Y_ORIGIN
+ {static} int SCAFF_GHOST_CHASE_DURATION
+ {static} int SCAFF_GHOST_SCATTER_DURATION
+ {static} int SCAFF_GHOST_X_ORIGIN
+ {static} int SCAFF_GHOST_Y_ORIGIN
+ {static} int TANK_GHOST_CHASE_DURATION
+ {static} int TANK_GHOST_SCATTER_DURATION
+ {static} int TANK_GHOST_X_ORIGIN
+ {static} int TANK_GHOST_Y_ORIGIN
+ {static} double SWIFT_GHOST_SPEED_MULTIPLIER
+ {static} int SWIFT_GHOST_CHASE_DURATION
+ {static} int SWIFT_GHOST_SCATTER_DURATION
+ {static} int SWIFT_GHOST_X_ORIGIN
+ {static} int SWIFT_GHOST_Y_ORIGIN
+ {static} int ITEM_Z_INDEX
+ {static} double SMALL_CIRCLE_CIRCUMSTANCE
+ {static} double BIG_CIRCLE_CIRCUMSTANCE
+ {static} int NEXT_PHRASE_AMOUNT_THRESHOLD
+ {static} int WINNING_SCORE
}
class logic.entity.ghost.state.SpawnState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
class logic.entity.ghost.state.FrightenState {
- BaseGhost ghost
+ void update(double)
+ void onEnter()
+ void onExit()
}
abstract class logic.fsm.BaseState {
+ {abstract}void update(double)
+ {abstract}void onEnter()
+ {abstract}void onExit()
}
class logic.TileMap {
- {static} Image wallSolidSprite
- {static} Image wallParallelSprite
- {static} Image wallTurnSprite
- {static} Image wallJunctionSprite
- {static} Image wallTerminalSprite
- boolean destroyed
- Map map
+ void draw(GraphicsContext)
+ int getZIndex()
+ boolean isDestroyed()
}
class render.GamePanel {
- double unitWidth
- double xPadding
- double yPadding
- void addEventListener()
+ double getUnitWidth()
+ double getXPadding()
+ double getYPadding()
}
class logic.entity.ghost.OrangeGhost {
}
class logic.entity.ghost.YellowGhost {
}
class logic.entity.item.FreezePotion {
+ void useEffect()
}
class logic.Map {
- int[][] mapInfo
- int[][] mapItemsInfo
- int row
- int col
+ boolean isWall(double,double)
+ int[][] getMapItemsInfo()
+ void setMapItemsInfo(double,double,int)
+ int[][] getMapInfo()
+ int getRow()
+ int getCol()
}
abstract class logic.entity.ghost.BaseGhost {
- Image sprite
- {static} Image frightenedSprite
- {static} Image ghostEyeSprite
- {static} Image freezeOverlaySprite
# Vector2D velocity
# Vector2D target
- double speed
# FiniteStateMachine fsm
+ void startFreeze()
+ void startFrighten()
+ int getZIndex()
+ void draw(GraphicsContext)
- void changeVelocity()
# double getSpeedMultiplier()
- void move(double)
+ void update(double)
+ void setTarget(Vector2D)
+ FiniteStateMachine getFsm()
+ Vector2D getVelocity()
+ void attack()
}
class logic.entity.ghost.GreenGhost {
}
interface render.Renderable {
~ int getZIndex()
~ void draw(GraphicsContext)
~ boolean isDestroyed()
}
class logic.AudioPlayer {
- MediaPlayer mediaPlayer
- Media audio
- boolean replay
+ void playAudio()
+ void stopAudio()
}


logic.fsm.BaseState <|-- logic.entity.ghost.state.RespawnState
logic.entity.Entity <|-- logic.entity.item.BaseItem
logic.fsm.BaseState <|-- logic.entity.ghost.state.FreezeState
logic.entity.item.BaseItem <|-- logic.entity.item.Cloak
logic.fsm.BaseState <|-- logic.entity.ghost.state.ChaseState
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.SwiftGhost
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.TankGhost
logic.entity.Entity <|-- logic.entity.Pacman
render.Renderable <|.. logic.entity.Entity
logic.fsm.BaseState <|-- logic.entity.ghost.state.ScatterState
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.ScaffGhost
logic.fsm.BaseState <|-- logic.entity.ghost.state.SpawnState
logic.fsm.BaseState <|-- logic.entity.ghost.state.FrightenState
render.Renderable <|.. logic.TileMap
javafx.scene.canvas.Canvas <|-- render.GamePanel
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.OrangeGhost
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.YellowGhost
logic.entity.item.BaseItem <|-- logic.entity.item.FreezePotion
logic.entity.Entity <|-- logic.entity.ghost.BaseGhost
logic.entity.ghost.BaseGhost <|-- logic.entity.ghost.GreenGhost
@enduml